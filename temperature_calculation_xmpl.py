import math as m
import numpy as np

EMISSIVITY = 0.95
TA_SHIFT = 8

class temperature_calculation_xmpl:
    def __init__(self, deviceParams):
        self._pageData = np.empty(451)
        self._frameData = np.zeros(835)
        self._tempData = np.zeros(768)
        self._tempData_ez = np.zeros(768)
        self._deviceParams = deviceParams
        self._ADC = 0

    def getFrameData(self, nr):
        # Two different frames to test with, one at home, one in Delft
        page0Par = np.array([6.5427e+04, 6.5395e+04, 6.5384e+04, 6.5375e+04, 6.5361e+04, 6.5353e+04
, 6.5344e+04, 6.5343e+04, 6.5338e+04, 6.5337e+04, 6.5342e+04, 6.5350e+04
, 6.5354e+04, 6.5364e+04, 6.5370e+04, 6.5403e+04, 6.5394e+04, 6.5372e+04
, 6.5355e+04, 6.5353e+04, 6.5339e+04, 6.5330e+04, 6.5317e+04, 6.5311e+04
, 6.5313e+04, 6.5314e+04, 6.5317e+04, 6.5330e+04, 6.5329e+04, 6.5344e+04
, 6.5347e+04, 6.5373e+04, 6.5396e+04, 6.5382e+04, 6.5373e+04, 6.5365e+04
, 6.5358e+04, 6.5343e+04, 6.5333e+04, 6.5326e+04, 6.5324e+04, 6.5323e+04
, 6.5326e+04, 6.5334e+04, 6.5342e+04, 6.5350e+04, 6.5359e+04, 6.5375e+04
, 6.5371e+04, 6.5364e+04, 6.5351e+04, 6.5344e+04, 6.5329e+04, 6.5318e+04
, 6.5306e+04, 6.5302e+04, 6.5291e+04, 6.5299e+04, 6.5300e+04, 6.5313e+04
, 6.5313e+04, 6.5328e+04, 6.5333e+04, 6.5343e+04, 6.5389e+04, 6.5378e+04
, 6.5365e+04, 6.5359e+04, 6.5373e+04, 6.5334e+04, 6.5325e+04, 6.5314e+04
, 6.5308e+04, 6.5305e+04, 6.5311e+04, 6.5330e+04, 6.5331e+04, 6.5338e+04
, 6.5349e+04, 6.5366e+04, 6.5363e+04, 6.5357e+04, 6.5341e+04, 6.5342e+04
, 6.5348e+04, 6.5307e+04, 6.5321e+04, 6.5287e+04, 6.5275e+04, 6.5281e+04
, 6.5285e+04, 6.5318e+04, 6.5304e+04, 6.5320e+04, 6.5325e+04, 6.5332e+04
, 6.5380e+04, 6.5369e+04, 6.5358e+04, 6.5356e+04, 6.5363e+04, 6.5329e+04
, 6.5344e+04, 6.5325e+04, 6.5298e+04, 6.5308e+04, 6.5300e+04, 6.5354e+04
, 6.5334e+04, 6.5333e+04, 6.5343e+04, 6.5359e+04, 6.5357e+04, 6.5349e+04
, 6.5334e+04, 6.5345e+04, 6.5334e+04, 6.5308e+04, 6.5337e+04, 6.5286e+04
, 6.5274e+04, 6.5297e+04, 6.5293e+04, 6.5332e+04, 6.5302e+04, 6.5309e+04
, 6.5315e+04, 6.5325e+04, 6.5374e+04, 6.5362e+04, 6.5353e+04, 6.5348e+04
, 6.5356e+04, 6.5333e+04, 6.5355e+04, 6.5336e+04, 6.5294e+04, 6.5347e+04
, 6.5308e+04, 6.5344e+04, 6.5349e+04, 6.5329e+04, 6.5336e+04, 6.5348e+04
, 6.5349e+04, 6.5345e+04, 6.5323e+04, 6.5335e+04, 6.5323e+04, 6.5306e+04
, 6.5327e+04, 6.5284e+04, 6.5294e+04, 6.5317e+04, 6.5295e+04, 6.5313e+04
, 6.5308e+04, 6.5303e+04, 6.5308e+04, 6.5321e+04, 6.5375e+04, 6.5367e+04
, 6.5354e+04, 6.5345e+04, 6.5353e+04, 6.5312e+04, 6.5346e+04, 6.5309e+04
, 6.5301e+04, 6.5350e+04, 6.5306e+04, 6.5334e+04, 6.5338e+04, 6.5318e+04
, 6.5329e+04, 6.5342e+04, 6.5345e+04, 6.5347e+04, 6.5324e+04, 6.5335e+04
, 6.5325e+04, 6.5285e+04, 6.5318e+04, 6.5266e+04, 6.5281e+04, 6.5315e+04
, 6.5294e+04, 6.5311e+04, 6.5300e+04, 6.5295e+04, 6.5309e+04, 6.5317e+04
, 6.5368e+04, 6.5358e+04, 6.5347e+04, 6.5341e+04, 6.5352e+04, 6.5308e+04
, 6.5335e+04, 6.5312e+04, 6.5283e+04, 6.5338e+04, 6.5296e+04, 6.5332e+04
, 6.5319e+04, 6.5327e+04, 6.5334e+04, 6.5349e+04, 6.5341e+04, 6.5335e+04
, 6.5317e+04, 6.5312e+04, 6.5318e+04, 6.5284e+04, 6.5307e+04, 6.5266e+04
, 6.5272e+04, 6.5301e+04, 6.5272e+04, 6.5301e+04, 6.5292e+04, 6.5305e+04
, 6.5312e+04, 6.5321e+04, 6.5355e+04, 6.5352e+04, 6.5341e+04, 6.5334e+04
, 6.5342e+04, 6.5309e+04, 6.5309e+04, 6.5307e+04, 6.5287e+04, 6.5328e+04
, 6.5290e+04, 6.5324e+04, 6.5322e+04, 6.5316e+04, 6.5336e+04, 6.5356e+04
, 6.5335e+04, 6.5326e+04, 6.5312e+04, 6.5316e+04, 6.5312e+04, 6.5282e+04
, 6.5286e+04, 6.5265e+04, 6.5269e+04, 6.5302e+04, 6.5274e+04, 6.5299e+04
, 6.5291e+04, 6.5295e+04, 6.5311e+04, 6.5323e+04, 6.5357e+04, 6.5350e+04
, 6.5336e+04, 6.5331e+04, 6.5341e+04, 6.5313e+04, 6.5314e+04, 6.5309e+04
, 6.5302e+04, 6.5318e+04, 6.5311e+04, 6.5319e+04, 6.5323e+04, 6.5324e+04
, 6.5338e+04, 6.5354e+04, 6.5332e+04, 6.5326e+04, 6.5307e+04, 6.5312e+04
, 6.5307e+04, 6.5293e+04, 6.5296e+04, 6.5286e+04, 6.5275e+04, 6.5289e+04
, 6.5287e+04, 6.5287e+04, 6.5291e+04, 6.5307e+04, 6.5314e+04, 6.5322e+04
, 6.5351e+04, 6.5348e+04, 6.5329e+04, 6.5323e+04, 6.5320e+04, 6.5315e+04
, 6.5317e+04, 6.5314e+04, 6.5310e+04, 6.5318e+04, 6.5316e+04, 6.5314e+04
, 6.5327e+04, 6.5333e+04, 6.5340e+04, 6.5357e+04, 6.5332e+04, 6.5320e+04
, 6.5307e+04, 6.5305e+04, 6.5290e+04, 6.5296e+04, 6.5290e+04, 6.5288e+04
, 6.5284e+04, 6.5288e+04, 6.5293e+04, 6.5294e+04, 6.5304e+04, 6.5315e+04
, 6.5325e+04, 6.5333e+04, 6.5353e+04, 6.5347e+04, 6.5333e+04, 6.5324e+04
, 6.5319e+04, 6.5313e+04, 6.5319e+04, 6.5315e+04, 6.5313e+04, 6.5318e+04
, 6.5325e+04, 6.5326e+04, 6.5335e+04, 6.5341e+04, 6.5354e+04, 6.5367e+04
, 6.5334e+04, 6.5325e+04, 6.5307e+04, 6.5302e+04, 6.5293e+04, 6.5293e+04
, 6.5297e+04, 6.5294e+04, 6.5292e+04, 6.5296e+04, 6.5296e+04, 6.5303e+04
, 6.5311e+04, 6.5320e+04, 6.5332e+04, 6.5342e+04, 6.5357e+04, 6.5350e+04
, 6.5337e+04, 6.5330e+04, 6.5318e+04, 6.5316e+04, 6.5326e+04, 6.5323e+04
, 6.5324e+04, 6.5324e+04, 6.5328e+04, 6.5335e+04, 6.5339e+04, 6.5344e+04
, 6.5358e+04, 6.5369e+04, 6.5328e+04, 6.5320e+04, 6.5308e+04, 6.5302e+04
, 6.5287e+04, 6.5283e+04, 6.5287e+04, 6.5292e+04, 6.5289e+04, 6.5295e+04
, 6.5295e+04, 6.5304e+04, 6.5307e+04, 6.5316e+04, 6.5329e+04, 6.5335e+04
, 1.9279e+04, 6.6270e+03, 3.2767e+04, 6.6270e+03, 3.2767e+04, 6.6270e+03
, 3.2767e+04, 6.6270e+03, 6.5441e+04, 5.2910e+04, 5.9380e+03, 5.5243e+04
, 6.5526e+04, 7.0000e+00, 6.5535e+04, 6.5534e+04, 6.8210e+03, 1.0470e+03
, 6.3900e+02, 3.2767e+04, 6.8200e+03, 1.0470e+03, 6.3900e+02, 3.2767e+04
, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00
, 3.0000e+00, 3.0000e+00, 1.6560e+03, 3.2767e+04, 6.6270e+03, 3.2767e+04
, 6.6270e+03, 3.2767e+04, 6.6270e+03, 3.2767e+04, 6.5446e+04, 6.2775e+04
, 5.3344e+04, 5.5141e+04, 5.0000e+00, 6.5532e+04, 6.5533e+04, 0.0000e+00
, 2.5400e+02, 7.9000e+01, 1.0536e+04, 6.2000e+01, 2.5400e+02, 7.9000e+01
, 1.0536e+04, 6.2000e+01, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00
, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00, 6.5290e+03, 0.0000e+00
, 2.8182e+04])
        page1Par = np.array([6.5419e+04, 6.5381e+04, 6.5372e+04, 6.5363e+04, 6.5352e+04, 6.5335e+04
, 6.5332e+04, 6.5320e+04, 6.5327e+04, 6.5324e+04, 6.5331e+04, 6.5334e+04
, 6.5340e+04, 6.5351e+04, 6.5358e+04, 6.5386e+04, 6.5406e+04, 6.5373e+04
, 6.5366e+04, 6.5352e+04, 6.5348e+04, 6.5334e+04, 6.5329e+04, 6.5319e+04
, 6.5324e+04, 6.5317e+04, 6.5327e+04, 6.5328e+04, 6.5343e+04, 6.5346e+04
, 6.5361e+04, 6.5372e+04, 6.5387e+04, 6.5374e+04, 6.5363e+04, 6.5349e+04
, 6.5341e+04, 6.5326e+04, 6.5321e+04, 6.5309e+04, 6.5307e+04, 6.5309e+04
, 6.5312e+04, 6.5316e+04, 6.5327e+04, 6.5331e+04, 6.5346e+04, 6.5351e+04
, 6.5379e+04, 6.5362e+04, 6.5357e+04, 6.5345e+04, 6.5348e+04, 6.5321e+04
, 6.5318e+04, 6.5302e+04, 6.5308e+04, 6.5296e+04, 6.5307e+04, 6.5312e+04
, 6.5330e+04, 6.5330e+04, 6.5345e+04, 6.5354e+04, 6.5378e+04, 6.5363e+04
, 6.5354e+04, 6.5351e+04, 6.5361e+04, 6.5313e+04, 6.5314e+04, 6.5294e+04
, 6.5288e+04, 6.5289e+04, 6.5297e+04, 6.5310e+04, 6.5316e+04, 6.5325e+04
, 6.5334e+04, 6.5336e+04, 6.5377e+04, 6.5358e+04, 6.5351e+04, 6.5338e+04
, 6.5365e+04, 6.5312e+04, 6.5317e+04, 6.5297e+04, 6.5294e+04, 6.5283e+04
, 6.5296e+04, 6.5322e+04, 6.5321e+04, 6.5323e+04, 6.5339e+04, 6.5347e+04
, 6.5375e+04, 6.5359e+04, 6.5349e+04, 6.5348e+04, 6.5351e+04, 6.5315e+04
, 6.5361e+04, 6.5288e+04, 6.5282e+04, 6.5290e+04, 6.5298e+04, 6.5336e+04
, 6.5313e+04, 6.5318e+04, 6.5325e+04, 6.5331e+04, 6.5365e+04, 6.5346e+04
, 6.5344e+04, 6.5334e+04, 6.5343e+04, 6.5312e+04, 6.5340e+04, 6.5314e+04
, 6.5287e+04, 6.5310e+04, 6.5292e+04, 6.5335e+04, 6.5330e+04, 6.5314e+04
, 6.5329e+04, 6.5339e+04, 6.5366e+04, 6.5352e+04, 6.5339e+04, 6.5350e+04
, 6.5347e+04, 6.5321e+04, 6.5346e+04, 6.5298e+04, 6.5302e+04, 6.5314e+04
, 6.5311e+04, 6.5323e+04, 6.5317e+04, 6.5307e+04, 6.5321e+04, 6.5326e+04
, 6.5361e+04, 6.5342e+04, 6.5339e+04, 6.5322e+04, 6.5335e+04, 6.5302e+04
, 6.5340e+04, 6.5301e+04, 6.5284e+04, 6.5327e+04, 6.5299e+04, 6.5316e+04
, 6.5334e+04, 6.5309e+04, 6.5324e+04, 6.5327e+04, 6.5367e+04, 6.5355e+04
, 6.5341e+04, 6.5343e+04, 6.5342e+04, 6.5299e+04, 6.5332e+04, 6.5275e+04
, 6.5310e+04, 6.5329e+04, 6.5306e+04, 6.5320e+04, 6.5315e+04, 6.5302e+04
, 6.5320e+04, 6.5323e+04, 6.5356e+04, 6.5342e+04, 6.5334e+04, 6.5323e+04
, 6.5343e+04, 6.5287e+04, 6.5332e+04, 6.5287e+04, 6.5279e+04, 6.5322e+04
, 6.5293e+04, 6.5315e+04, 6.5327e+04, 6.5300e+04, 6.5317e+04, 6.5325e+04
, 6.5366e+04, 6.5351e+04, 6.5340e+04, 6.5335e+04, 6.5344e+04, 6.5295e+04
, 6.5329e+04, 6.5273e+04, 6.5292e+04, 6.5314e+04, 6.5295e+04, 6.5311e+04
, 6.5306e+04, 6.5312e+04, 6.5323e+04, 6.5326e+04, 6.5349e+04, 6.5332e+04
, 6.5329e+04, 6.5312e+04, 6.5325e+04, 6.5284e+04, 6.5308e+04, 6.5288e+04
, 6.5267e+04, 6.5309e+04, 6.5284e+04, 6.5302e+04, 6.5306e+04, 6.5307e+04
, 6.5323e+04, 6.5335e+04, 6.5357e+04, 6.5341e+04, 6.5332e+04, 6.5329e+04
, 6.5333e+04, 6.5294e+04, 6.5306e+04, 6.5272e+04, 6.5286e+04, 6.5303e+04
, 6.5287e+04, 6.5308e+04, 6.5308e+04, 6.5301e+04, 6.5326e+04, 6.5332e+04
, 6.5339e+04, 6.5327e+04, 6.5322e+04, 6.5306e+04, 6.5326e+04, 6.5285e+04
, 6.5288e+04, 6.5280e+04, 6.5275e+04, 6.5311e+04, 6.5278e+04, 6.5298e+04
, 6.5306e+04, 6.5293e+04, 6.5320e+04, 6.5335e+04, 6.5356e+04, 6.5346e+04
, 6.5331e+04, 6.5331e+04, 6.5329e+04, 6.5303e+04, 6.5306e+04, 6.5293e+04
, 6.5294e+04, 6.5303e+04, 6.5300e+04, 6.5300e+04, 6.5310e+04, 6.5314e+04
, 6.5328e+04, 6.5333e+04, 6.5336e+04, 6.5322e+04, 6.5317e+04, 6.5302e+04
, 6.5321e+04, 6.5293e+04, 6.5299e+04, 6.5295e+04, 6.5287e+04, 6.5290e+04
, 6.5297e+04, 6.5292e+04, 6.5305e+04, 6.5304e+04, 6.5325e+04, 6.5333e+04
, 6.5359e+04, 6.5338e+04, 6.5330e+04, 6.5319e+04, 6.5316e+04, 6.5312e+04
, 6.5311e+04, 6.5301e+04, 6.5300e+04, 6.5301e+04, 6.5307e+04, 6.5301e+04
, 6.5316e+04, 6.5320e+04, 6.5336e+04, 6.5339e+04, 6.5330e+04, 6.5320e+04
, 6.5315e+04, 6.5297e+04, 6.5299e+04, 6.5283e+04, 6.5298e+04, 6.5286e+04
, 6.5294e+04, 6.5289e+04, 6.5299e+04, 6.5290e+04, 6.5315e+04, 6.5318e+04
, 6.5332e+04, 6.5337e+04, 6.5359e+04, 6.5342e+04, 6.5331e+04, 6.5318e+04
, 6.5317e+04, 6.5307e+04, 6.5315e+04, 6.5305e+04, 6.5309e+04, 6.5306e+04
, 6.5314e+04, 6.5315e+04, 6.5330e+04, 6.5329e+04, 6.5346e+04, 6.5346e+04
, 6.5332e+04, 6.5316e+04, 6.5313e+04, 6.5295e+04, 6.5297e+04, 6.5289e+04
, 6.5305e+04, 6.5292e+04, 6.5297e+04, 6.5295e+04, 6.5310e+04, 6.5301e+04
, 6.5316e+04, 6.5319e+04, 6.5341e+04, 6.5345e+04, 6.5363e+04, 6.5348e+04
, 6.5342e+04, 6.5326e+04, 6.5321e+04, 6.5312e+04, 6.5326e+04, 6.5314e+04
, 6.5317e+04, 6.5315e+04, 6.5321e+04, 6.5326e+04, 6.5334e+04, 6.5336e+04
, 6.5354e+04, 6.5357e+04, 6.5323e+04, 6.5310e+04, 6.5307e+04, 6.5293e+04
, 6.5290e+04, 6.5277e+04, 6.5290e+04, 6.5287e+04, 6.5298e+04, 6.5290e+04
, 6.5303e+04, 6.5301e+04, 6.5313e+04, 6.5312e+04, 6.5336e+04, 6.5337e+04
, 1.9279e+04, 6.6270e+03, 3.2767e+04, 6.6270e+03, 3.2767e+04, 6.6270e+03
, 3.2767e+04, 6.6270e+03, 6.5442e+04, 5.2910e+04, 5.9380e+03, 5.5243e+04
, 6.5524e+04, 7.0000e+00, 6.5531e+04, 6.5534e+04, 6.8100e+03, 1.0470e+03
, 6.4100e+02, 3.2767e+04, 6.8090e+03, 1.0470e+03, 6.4100e+02, 3.2767e+04
, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00
, 3.0000e+00, 3.0000e+00, 1.6560e+03, 3.2767e+04, 6.6270e+03, 3.2767e+04
, 6.6270e+03, 3.2767e+04, 6.6270e+03, 3.2767e+04, 6.5446e+04, 6.2775e+04
, 5.3344e+04, 5.5141e+04, 5.0000e+00, 6.5531e+04, 6.5533e+04, 6.5535e+04
, 2.5400e+02, 6.6000e+01, 1.0536e+04, 6.3000e+01, 2.5400e+02, 6.6000e+01
, 1.0536e+04, 6.3000e+01, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00
, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00, 6.5290e+03, 1.0000e+00
, 2.8022e+04])
        page0 = np.array([6.5428e+04, 6.5401e+04, 6.5384e+04, 6.5377e+04, 6.5363e+04, 6.5357e+04
, 6.5349e+04, 6.5352e+04, 6.5347e+04, 6.5354e+04, 6.5355e+04, 6.5367e+04
, 6.5368e+04, 6.5378e+04, 6.5380e+04, 6.5409e+04, 6.5394e+04, 6.5378e+04
, 6.5359e+04, 6.5357e+04, 6.5339e+04, 6.5335e+04, 6.5322e+04, 6.5320e+04
, 6.5323e+04, 6.5338e+04, 6.5337e+04, 6.5343e+04, 6.5342e+04, 6.5356e+04
, 6.5356e+04, 6.5380e+04, 6.5398e+04, 6.5387e+04, 6.5374e+04, 6.5365e+04
, 6.5358e+04, 6.5345e+04, 6.5336e+04, 6.5332e+04, 6.5333e+04, 6.5339e+04
, 6.5384e+04, 6.5355e+04, 6.5357e+04, 6.5364e+04, 6.5369e+04, 6.5386e+04
, 6.5372e+04, 6.5369e+04, 6.5350e+04, 6.5343e+04, 6.5326e+04, 6.5325e+04
, 6.5309e+04, 6.5312e+04, 6.5308e+04, 6.5331e+04, 6.5354e+04, 6.5331e+04
, 6.5328e+04, 6.5338e+04, 6.5345e+04, 6.5355e+04, 6.5392e+04, 6.5378e+04
, 6.5365e+04, 6.5357e+04, 6.5343e+04, 6.5333e+04, 6.5324e+04, 6.5324e+04
, 6.5322e+04, 6.5343e+04, 6.5369e+04, 6.5358e+04, 6.5348e+04, 6.5354e+04
, 6.5359e+04, 6.5375e+04, 6.5363e+04, 6.5358e+04, 6.5338e+04, 6.5336e+04
, 6.5316e+04, 6.5309e+04, 6.5300e+04, 6.5297e+04, 6.5305e+04, 6.5334e+04
, 6.5333e+04, 6.5331e+04, 6.5318e+04, 6.5333e+04, 6.5335e+04, 6.5343e+04
, 6.5380e+04, 6.5369e+04, 6.5356e+04, 6.5344e+04, 6.5329e+04, 6.5319e+04
, 6.5311e+04, 6.5322e+04, 6.5338e+04, 6.5337e+04, 6.5335e+04, 6.5351e+04
, 6.5344e+04, 6.5347e+04, 6.5353e+04, 6.5370e+04, 6.5356e+04, 6.5346e+04
, 6.5331e+04, 6.5318e+04, 6.5299e+04, 6.5299e+04, 6.5304e+04, 6.5309e+04
, 6.5294e+04, 6.5311e+04, 6.5312e+04, 6.5332e+04, 6.5309e+04, 6.5322e+04
, 6.5324e+04, 6.5336e+04, 6.5375e+04, 6.5360e+04, 6.5345e+04, 6.5333e+04
, 6.5314e+04, 6.5305e+04, 6.5307e+04, 6.5298e+04, 6.5290e+04, 6.5304e+04
, 6.5328e+04, 6.5344e+04, 6.5341e+04, 6.5338e+04, 6.5346e+04, 6.5357e+04
, 6.5347e+04, 6.5338e+04, 6.5313e+04, 6.5307e+04, 6.5288e+04, 6.5280e+04
, 6.5271e+04, 6.5267e+04, 6.5263e+04, 6.5298e+04, 6.5309e+04, 6.5328e+04
, 6.5303e+04, 6.5312e+04, 6.5322e+04, 6.5334e+04, 6.5373e+04, 6.5356e+04
, 6.5343e+04, 6.5329e+04, 6.5313e+04, 6.5296e+04, 6.5290e+04, 6.5282e+04
, 6.5288e+04, 6.5304e+04, 6.5347e+04, 6.5345e+04, 6.5335e+04, 6.5327e+04
, 6.5339e+04, 6.5352e+04, 6.5342e+04, 6.5333e+04, 6.5309e+04, 6.5305e+04
, 6.5278e+04, 6.5274e+04, 6.5259e+04, 6.5259e+04, 6.5257e+04, 6.5311e+04
, 6.5333e+04, 6.5327e+04, 6.5296e+04, 6.5303e+04, 6.5317e+04, 6.5327e+04
, 6.5366e+04, 6.5353e+04, 6.5338e+04, 6.5321e+04, 6.5305e+04, 6.5294e+04
, 6.5280e+04, 6.5279e+04, 6.5278e+04, 6.5301e+04, 6.5355e+04, 6.5345e+04
, 6.5318e+04, 6.5326e+04, 6.5334e+04, 6.5355e+04, 6.5339e+04, 6.5332e+04
, 6.5307e+04, 6.5294e+04, 6.5279e+04, 6.5274e+04, 6.5255e+04, 6.5257e+04
, 6.5261e+04, 6.5307e+04, 6.5320e+04, 6.5305e+04, 6.5288e+04, 6.5305e+04
, 6.5310e+04, 6.5324e+04, 6.5358e+04, 6.5351e+04, 6.5333e+04, 6.5322e+04
, 6.5308e+04, 6.5295e+04, 6.5285e+04, 6.5281e+04, 6.5284e+04, 6.5291e+04
, 6.5322e+04, 6.5328e+04, 6.5310e+04, 6.5324e+04, 6.5334e+04, 6.5355e+04
, 6.5334e+04, 6.5324e+04, 6.5306e+04, 6.5294e+04, 6.5276e+04, 6.5272e+04
, 6.5260e+04, 6.5260e+04, 6.5257e+04, 6.5292e+04, 6.5295e+04, 6.5289e+04
, 6.5288e+04, 6.5302e+04, 6.5310e+04, 6.5325e+04, 6.5360e+04, 6.5352e+04
, 6.5338e+04, 6.5319e+04, 6.5307e+04, 6.5295e+04, 6.5290e+04, 6.5285e+04
, 6.5287e+04, 6.5301e+04, 6.5314e+04, 6.5324e+04, 6.5316e+04, 6.5322e+04
, 6.5337e+04, 6.5357e+04, 6.5336e+04, 6.5326e+04, 6.5308e+04, 6.5298e+04
, 6.5277e+04, 6.5271e+04, 6.5265e+04, 6.5265e+04, 6.5257e+04, 6.5294e+04
, 6.5292e+04, 6.5288e+04, 6.5290e+04, 6.5307e+04, 6.5318e+04, 6.5326e+04
, 6.5357e+04, 6.5353e+04, 6.5333e+04, 6.5324e+04, 6.5312e+04, 6.5299e+04
, 6.5297e+04, 6.5292e+04, 6.5298e+04, 6.5308e+04, 6.5314e+04, 6.5314e+04
, 6.5326e+04, 6.5341e+04, 6.5345e+04, 6.5363e+04, 6.5338e+04, 6.5325e+04
, 6.5308e+04, 6.5304e+04, 6.5285e+04, 6.5281e+04, 6.5268e+04, 6.5273e+04
, 6.5268e+04, 6.5300e+04, 6.5303e+04, 6.5298e+04, 6.5304e+04, 6.5320e+04
, 6.5328e+04, 6.5337e+04, 6.5360e+04, 6.5354e+04, 6.5339e+04, 6.5331e+04
, 6.5316e+04, 6.5308e+04, 6.5302e+04, 6.5303e+04, 6.5299e+04, 6.5315e+04
, 6.5324e+04, 6.5333e+04, 6.5337e+04, 6.5347e+04, 6.5354e+04, 6.5367e+04
, 6.5341e+04, 6.5330e+04, 6.5313e+04, 6.5308e+04, 6.5297e+04, 6.5285e+04
, 6.5280e+04, 6.5281e+04, 6.5280e+04, 6.5290e+04, 6.5303e+04, 6.5309e+04
, 6.5313e+04, 6.5327e+04, 6.5332e+04, 6.5339e+04, 6.5363e+04, 6.5358e+04
, 6.5347e+04, 6.5341e+04, 6.5326e+04, 6.5318e+04, 6.5317e+04, 6.5314e+04
, 6.5318e+04, 6.5320e+04, 6.5332e+04, 6.5338e+04, 6.5342e+04, 6.5347e+04
, 6.5356e+04, 6.5361e+04, 6.5336e+04, 6.5329e+04, 6.5318e+04, 6.5310e+04
, 6.5295e+04, 6.5291e+04, 6.5285e+04, 6.5284e+04, 6.5285e+04, 6.5292e+04
, 6.5292e+04, 6.5308e+04, 6.5311e+04, 6.5318e+04, 6.5323e+04, 6.5333e+04
, 1.9417e+04, 6.5810e+03, 3.2767e+04, 6.5810e+03, 3.2767e+04, 6.5800e+03
, 3.2767e+04, 6.5800e+03, 6.5443e+04, 5.2896e+04, 5.9840e+03, 5.5241e+04
, 6.5524e+04, 6.0000e+00, 6.5535e+04, 1.0000e+00, 6.7570e+03, 1.0400e+03
, 6.3300e+02, 3.2767e+04, 6.7570e+03, 1.0400e+03, 6.3300e+02, 3.2767e+04
, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00
, 3.0000e+00, 3.0000e+00, 1.6450e+03, 3.2767e+04, 6.5810e+03, 3.2767e+04
, 6.5810e+03, 3.2767e+04, 6.5800e+03, 3.2767e+04, 6.5445e+04, 6.2782e+04
, 5.3339e+04, 5.5136e+04, 6.0000e+00, 6.5531e+04, 6.5533e+04, 6.5535e+04
, 2.5100e+02, 6.7000e+01, 1.0445e+04, 6.5000e+01, 2.5000e+02, 6.7000e+01
, 1.0445e+04, 6.5000e+01, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00
, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00, 6.5290e+03, 0.0000e+00
, 2.6518e+04])
        page1 = np.array([6.5418e+04, 6.5382e+04, 6.5374e+04, 6.5363e+04, 6.5355e+04, 6.5345e+04
, 6.5339e+04, 6.5329e+04, 6.5338e+04, 6.5341e+04, 6.5344e+04, 6.5348e+04
, 6.5352e+04, 6.5361e+04, 6.5367e+04, 6.5392e+04, 6.5409e+04, 6.5377e+04
, 6.5371e+04, 6.5355e+04, 6.5347e+04, 6.5336e+04, 6.5335e+04, 6.5330e+04
, 6.5334e+04, 6.5331e+04, 6.5349e+04, 6.5346e+04, 6.5358e+04, 6.5357e+04
, 6.5370e+04, 6.5380e+04, 6.5388e+04, 6.5376e+04, 6.5364e+04, 6.5351e+04
, 6.5338e+04, 6.5328e+04, 6.5324e+04, 6.5319e+04, 6.5319e+04, 6.5338e+04
, 6.5355e+04, 6.5335e+04, 6.5342e+04, 6.5346e+04, 6.5356e+04, 6.5359e+04
, 6.5383e+04, 6.5365e+04, 6.5360e+04, 6.5345e+04, 6.5343e+04, 6.5325e+04
, 6.5323e+04, 6.5311e+04, 6.5323e+04, 6.5319e+04, 6.5383e+04, 6.5335e+04
, 6.5345e+04, 6.5344e+04, 6.5362e+04, 6.5365e+04, 6.5383e+04, 6.5366e+04
, 6.5355e+04, 6.5343e+04, 6.5330e+04, 6.5315e+04, 6.5311e+04, 6.5305e+04
, 6.5309e+04, 6.5337e+04, 6.5351e+04, 6.5329e+04, 6.5331e+04, 6.5336e+04
, 6.5348e+04, 6.5349e+04, 6.5377e+04, 6.5354e+04, 6.5350e+04, 6.5333e+04
, 6.5330e+04, 6.5313e+04, 6.5308e+04, 6.5303e+04, 6.5317e+04, 6.5333e+04
, 6.5346e+04, 6.5345e+04, 6.5333e+04, 6.5335e+04, 6.5351e+04, 6.5358e+04
, 6.5373e+04, 6.5358e+04, 6.5348e+04, 6.5328e+04, 6.5315e+04, 6.5306e+04
, 6.5302e+04, 6.5307e+04, 6.5323e+04, 6.5323e+04, 6.5328e+04, 6.5334e+04
, 6.5323e+04, 6.5323e+04, 6.5337e+04, 6.5344e+04, 6.5365e+04, 6.5344e+04
, 6.5341e+04, 6.5322e+04, 6.5313e+04, 6.5295e+04, 6.5301e+04, 6.5308e+04
, 6.5320e+04, 6.5303e+04, 6.5318e+04, 6.5332e+04, 6.5332e+04, 6.5325e+04
, 6.5340e+04, 6.5348e+04, 6.5364e+04, 6.5351e+04, 6.5334e+04, 6.5319e+04
, 6.5306e+04, 6.5291e+04, 6.5307e+04, 6.5283e+04, 6.5278e+04, 6.5301e+04
, 6.5317e+04, 6.5333e+04, 6.5318e+04, 6.5318e+04, 6.5333e+04, 6.5339e+04
, 6.5357e+04, 6.5334e+04, 6.5331e+04, 6.5305e+04, 6.5297e+04, 6.5280e+04
, 6.5279e+04, 6.5268e+04, 6.5274e+04, 6.5284e+04, 6.5323e+04, 6.5324e+04
, 6.5327e+04, 6.5316e+04, 6.5335e+04, 6.5338e+04, 6.5364e+04, 6.5344e+04
, 6.5328e+04, 6.5316e+04, 6.5299e+04, 6.5281e+04, 6.5277e+04, 6.5269e+04
, 6.5273e+04, 6.5314e+04, 6.5339e+04, 6.5332e+04, 6.5312e+04, 6.5311e+04
, 6.5328e+04, 6.5331e+04, 6.5355e+04, 6.5335e+04, 6.5323e+04, 6.5302e+04
, 6.5297e+04, 6.5270e+04, 6.5273e+04, 6.5259e+04, 6.5273e+04, 6.5282e+04
, 6.5341e+04, 6.5331e+04, 6.5323e+04, 6.5309e+04, 6.5327e+04, 6.5336e+04
, 6.5361e+04, 6.5342e+04, 6.5326e+04, 6.5306e+04, 6.5295e+04, 6.5280e+04
, 6.5270e+04, 6.5265e+04, 6.5275e+04, 6.5317e+04, 6.5343e+04, 6.5312e+04
, 6.5305e+04, 6.5310e+04, 6.5323e+04, 6.5332e+04, 6.5351e+04, 6.5328e+04
, 6.5320e+04, 6.5297e+04, 6.5291e+04, 6.5269e+04, 6.5266e+04, 6.5257e+04
, 6.5266e+04, 6.5277e+04, 6.5330e+04, 6.5321e+04, 6.5300e+04, 6.5304e+04
, 6.5323e+04, 6.5335e+04, 6.5359e+04, 6.5336e+04, 6.5325e+04, 6.5307e+04
, 6.5295e+04, 6.5282e+04, 6.5279e+04, 6.5265e+04, 6.5273e+04, 6.5303e+04
, 6.5320e+04, 6.5300e+04, 6.5305e+04, 6.5308e+04, 6.5322e+04, 6.5329e+04
, 6.5340e+04, 6.5323e+04, 6.5316e+04, 6.5293e+04, 6.5294e+04, 6.5270e+04
, 6.5271e+04, 6.5256e+04, 6.5270e+04, 6.5266e+04, 6.5296e+04, 6.5303e+04
, 6.5296e+04, 6.5302e+04, 6.5322e+04, 6.5334e+04, 6.5360e+04, 6.5342e+04
, 6.5329e+04, 6.5311e+04, 6.5296e+04, 6.5282e+04, 6.5281e+04, 6.5276e+04
, 6.5274e+04, 6.5305e+04, 6.5311e+04, 6.5298e+04, 6.5309e+04, 6.5315e+04
, 6.5330e+04, 6.5333e+04, 6.5339e+04, 6.5324e+04, 6.5319e+04, 6.5293e+04
, 6.5293e+04, 6.5272e+04, 6.5276e+04, 6.5264e+04, 6.5273e+04, 6.5277e+04
, 6.5297e+04, 6.5295e+04, 6.5303e+04, 6.5305e+04, 6.5332e+04, 6.5340e+04
, 6.5360e+04, 6.5338e+04, 6.5327e+04, 6.5316e+04, 6.5307e+04, 6.5291e+04
, 6.5289e+04, 6.5283e+04, 6.5284e+04, 6.5304e+04, 6.5315e+04, 6.5303e+04
, 6.5315e+04, 6.5326e+04, 6.5343e+04, 6.5343e+04, 6.5340e+04, 6.5325e+04
, 6.5313e+04, 6.5295e+04, 6.5297e+04, 6.5273e+04, 6.5280e+04, 6.5268e+04
, 6.5282e+04, 6.5295e+04, 6.5298e+04, 6.5294e+04, 6.5319e+04, 6.5321e+04
, 6.5336e+04, 6.5342e+04, 6.5365e+04, 6.5347e+04, 6.5338e+04, 6.5321e+04
, 6.5315e+04, 6.5297e+04, 6.5298e+04, 6.5291e+04, 6.5297e+04, 6.5300e+04
, 6.5318e+04, 6.5318e+04, 6.5332e+04, 6.5335e+04, 6.5349e+04, 6.5348e+04
, 6.5341e+04, 6.5326e+04, 6.5322e+04, 6.5305e+04, 6.5301e+04, 6.5286e+04
, 6.5288e+04, 6.5277e+04, 6.5286e+04, 6.5286e+04, 6.5314e+04, 6.5307e+04
, 6.5322e+04, 6.5321e+04, 6.5343e+04, 6.5347e+04, 6.5372e+04, 6.5355e+04
, 6.5349e+04, 6.5333e+04, 6.5326e+04, 6.5312e+04, 6.5313e+04, 6.5308e+04
, 6.5315e+04, 6.5313e+04, 6.5324e+04, 6.5328e+04, 6.5340e+04, 6.5340e+04
, 6.5352e+04, 6.5353e+04, 6.5332e+04, 6.5318e+04, 6.5317e+04, 6.5303e+04
, 6.5300e+04, 6.5288e+04, 6.5293e+04, 6.5282e+04, 6.5291e+04, 6.5286e+04
, 6.5306e+04, 6.5304e+04, 6.5318e+04, 6.5315e+04, 6.5333e+04, 6.5339e+04
, 1.9417e+04, 6.5800e+03, 3.2767e+04, 6.5800e+03, 3.2767e+04, 6.5790e+03
, 3.2767e+04, 6.5790e+03, 6.5443e+04, 5.2896e+04, 5.9840e+03, 5.5238e+04
, 6.5524e+04, 5.0000e+00, 6.5535e+04, 6.5531e+04, 6.7570e+03, 1.0390e+03
, 6.3300e+02, 3.2767e+04, 6.7570e+03, 1.0390e+03, 6.3300e+02, 3.2767e+04
, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00
, 3.0000e+00, 3.0000e+00, 1.6450e+03, 3.2767e+04, 6.5800e+03, 3.2767e+04
, 6.5800e+03, 3.2767e+04, 6.5790e+03, 3.2767e+04, 6.5446e+04, 6.2782e+04
, 5.3336e+04, 5.5136e+04, 7.0000e+00, 6.5531e+04, 6.5530e+04, 6.5535e+04
, 2.5100e+02, 6.7000e+01, 1.0447e+04, 6.5000e+01, 2.5100e+02, 6.7000e+01
, 1.0447e+04, 6.5000e+01, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00
, 3.0000e+00, 3.0000e+00, 3.0000e+00, 3.0000e+00, 6.5290e+03, 1.0000e+00
, 2.6646e+04])
        
        if nr == 0:
            self._pageData = page0
        if nr == 1:
            self._pageData = page1
        index = 384

        self._ADC = self._pageData[450]        
        if self._pageData[449] == 0:
            for i in range(384):
                location = (i * 2) + (m.floor(i / 16) % 2)
                self._frameData[location] = self._pageData[i]
        else:
            for i in range(384):
                location = (i * 2) + 1 - (m.floor(i / 16) % 2)
                self._frameData[location] = self._pageData[i]
        for i in range(768, 835):
            self._frameData[i] = self._pageData[index]
            index += 1
        
        self._frameData = self._frameData.astype(int)

    def getVDD(self):
        vdd = self._frameData[810]
        if vdd > 32767:
            vdd -= 65536

        resRAM = (self._frameData[832] & 3072) / 1024
        resCor = pow(2, self._deviceParams['resolutionEE']) / m.pow(2, resRAM)
        vdd = ((resCor * vdd - self._deviceParams['vdd25']) / self._deviceParams['kVdd']) + 3.3
        return vdd

    def getTa(self):
        vdd = self.getVDD()
        ptat = self._frameData[800]
        if ptat > 32767:
            ptat -= 65536

        ptatArt = self._frameData[768]
        if ptatArt > 32767:
            ptatArt -= 65536

        ptatArt += (ptat * self._deviceParams['alphaPTAT'])
        ptatArt = (ptat / ptatArt) * 262144
        ta = ptatArt / (1 + self._deviceParams['kvPTAT'] * (vdd - 3.3)) - self._deviceParams['vPTAT25']
        ta = (ta / self._deviceParams['ktPTAT']) + 25
        return ta
    
    def getGain(self):
        gain = self._frameData[778]
        if gain > 32767:
            gain -= 65536
        
        gain = self._deviceParams['gainEE'] / gain

        return gain

    def getIRDataCP(self, gain, ta, vdd, mode): 
        ## Compensate the gain of the CP pixel
        irDataCP0 = self._frameData[776]
        if irDataCP0 > 32767:
            irDataCP0 -= 65536
        
        irDataCP1 = self._frameData[808]
        if irDataCP1 > 32767:
            irDataCP1 -= 65536
        
        irDataCP0 *= gain
        irDataCP1 *= gain

        ## Compensate the offset, Ta and VDD of the CP pixels
        irDataCP0 = irDataCP0 - self._deviceParams['cpOffset'][0] * (1 + self._deviceParams['cpKta'] * (ta - 25)) * (1 + self._deviceParams['cpKv'] * (vdd - 3.3))
        if mode == self._deviceParams['calibrationModeEE']:
            irDataCP1 = irDataCP1 - self._deviceParams['cpOffset'][1] * (1 + self._deviceParams['cpKta'] * (ta - 25)) * (1 + self._deviceParams['cpKv'] * (vdd - 3.3))
        else:
            irDataCP1 = irDataCP1 - (self._deviceParams['cpOffset'][1] + self._deviceParams['ilChessC'][0]) * (1 + self._deviceParams['cpKta'] * (ta - 25)) * (1 + self._deviceParams['cpKv'] * (vdd - 3.3))
        
        return [irDataCP0, irDataCP1]

    def getPixData(self):        
        for i in range(2):
            self.getFrameData(i)

            subPage = self._frameData[833]
            vdd = self.getVDD()
            ta = self.getTa()
            ## Reflected temperature based on the sensor ambient temperature
            tr = ta - TA_SHIFT
            taTr = m.pow((tr + 273.15), 4) - (m.pow((tr + 273.15), 4) - m.pow((ta + 273.15), 4)) / EMISSIVITY

            ## Sensitivity correction coefficients for each temperature range
            alphaCorrR = []
            alphaCorrR.append(1 / (1 + self._deviceParams['KsTo'][0] * 40))
            alphaCorrR.append(1)
            alphaCorrR.append(1 + self._deviceParams['KsTo'][2] * self._deviceParams['ct'][2])
            alphaCorrR.append(alphaCorrR[2] * (1 + self._deviceParams['KsTo'][3] * (self._deviceParams['ct'][3] - self._deviceParams['ct'][2])))

            gain = self.getGain()
            mode = (self._frameData[832] & 4096) / 32
            irDataCP = self.getIRDataCP(gain, ta, vdd, mode)
            
            for p in range(768):
                ilPattern = m.floor(p / 32) - m.floor(p / 64) * 2
                chessPattern = ilPattern ^ (p - (m.floor(p / 2)) * 2)
                conversionPattern = (m.floor((p + 2) / 4) - m.floor((p + 3) / 4) + m.floor((p + 1) / 4) - m.floor(p / 4)) * (1 - 2 * ilPattern)
                if mode == 0:
                    pattern = ilPattern
                else:
                    pattern = chessPattern    
                if pattern == subPage:
                    ## Calculate the gain compensation on each pixel
                    irData = self._frameData[p]
                    if irData > 32767:
                        irData -= 65536
                    irData = irData * gain

                    ## Calculate the IR data compensation with offset, VDD and Ta
                    irData = irData - self._deviceParams['offset'][p] * (1 + self._deviceParams['kta'][p] * (ta - 25)) * (1 + self._deviceParams['kv'][p] * (vdd - 3.3))

                    #irData = irData - app.structVar.offset(pixelNumber)*(1 + app.structVar.kta(pixelNumber)*(Ta - 25))*(1 + app.structVar.kv(pixelNumber)*(vdd - 3.3));

                    if not (mode == self._deviceParams['calibrationModeEE']):
                        irData = irData + self._deviceParams['ilChessC'][2] * (2 * ilPattern - 1) - self._deviceParams['ilChessC'][1] * conversionPattern
                    ## IR data emmisivity data compensation 
                    irData /= EMISSIVITY 
                    irData = irData - self._deviceParams['tgc'] * irDataCP[subPage] 
                    ## Normalizing to sensitivity
                    alphaCompensated = (self._deviceParams['alpha'][p] - self._deviceParams['tgc'] * self._deviceParams['cpAlpha'][subPage]) * (1 + self._deviceParams['KsTa'] * (ta - 25))
                    
                    sx = m.pow(alphaCompensated, 3) * (irData + alphaCompensated * taTr)
                    sx = self._deviceParams['KsTo'][1] * m.sqrt(m.sqrt(sx))
                    to = m.sqrt(irData / (alphaCompensated * (1 - self._deviceParams['KsTo'][1] * 273.15) + sx) + taTr)
                    to = m.sqrt(to) - 273.15
                    ## Determine the range we are in
                    if to < self._deviceParams['ct'][1]:
                        r = 0
                    elif to < self._deviceParams['ct'][2]:
                        r = 1
                    elif to < self._deviceParams['ct'][3]:
                        r = 2
                    else:
                        r = 3

                    ## Extended To range calculation
                    # to = m.sqrt(m.sqrt(irData / (alphaCompensated * alphaCorrR[r] * (1 + self._deviceParams['KsTo'][r] * (to - self._deviceParams['ct'][r]))) + taTr)) - 273.15
                    ## Relative temp calculation
                    to_ez = ((irData / alphaCompensated) + taTr) * m.pow(10,-9)
                    # self._tempData[p] = to
                    self._tempData_ez[p] = to_ez
        
        return self._tempData_ez