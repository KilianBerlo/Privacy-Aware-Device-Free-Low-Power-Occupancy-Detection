import math as m
import numpy as np

EMISSIVITY = 0.95
TA_SHIFT = 8

class temperature_calculation_xmpl:
    def __init__(self, deviceParams):
        self._pageData = []
        self._frameData = [0 for a in range(835)]
        self._tempData = []
        self._tempData = np.zeros(768)
        self._deviceParams = deviceParams
        self._ADC = 0

    def getFrameData(self, nr):
        # Example 2
        self._pageData.clear()
        page0 = [65401, 65355, 65336, 65330, 65319, 65308, 65344, 65361, 65369, 65367, 65346, 65336, 65340, 65352, 65359, 65385, 65393, 65347, 65334, 65319, 65309, 65297, 65305, 65351, 65363, 65356, 65345, 65318, 65343, 65348, 65359, 65375, 65365, 65346, 65328, 65310, 65297, 65287, 65295, 65338, 65336, 65327, 65297, 65291, 65320, 65330, 65342, 65348, 65365, 65335, 65321, 65304, 65299, 65281, 65274, 65301, 65322, 65309, 65296, 65282, 65310, 65328, 65344, 65354, 65356, 65334, 65316, 65303, 65281, 65265, 65259, 65259, 65260, 65261, 65261, 65271, 65283, 65310, 65321, 65323, 65355, 65322, 65308, 65290, 65278, 65259, 65253, 65244, 65252, 65245, 65259, 65264, 65281, 65293, 65315, 65326, 65341, 65321, 65305, 65285, 65267, 65256, 65239, 65234, 65234, 65239, 65247, 65252, 65265, 65281, 65294, 65312, 65341, 65301, 65301, 65278, 65262, 65242, 65233, 65228, 65234, 65230, 65236, 65244, 65269, 65277, 65298, 65315, 65329, 65307, 65292, 65276, 65260, 65238, 65228, 65219, 65222, 65224, 65233, 65239, 65254, 65269, 65287, 65300, 65334, 65290, 65292, 65263, 65248, 65228, 65222, 65212, 65216, 65215, 65230, 65229, 65259, 65268, 65287, 65296, 65333, 65301, 65290, 65270, 65248, 65230, 65221, 65215, 65214, 65213, 65223, 65235, 65246, 65259, 65282, 65293, 65334, 65290, 65282, 65260, 65243, 65220, 65218, 65206, 65218, 65206, 65217, 65224, 65244, 65260, 65275, 65291, 65343, 65299, 65284, 65257, 65248, 65232, 65217, 65211, 65211, 65202, 65216, 65231, 65243, 65258, 65273, 65288, 65338, 65294, 65269, 65251, 65238, 65216, 65210, 65199, 65202, 65194, 65216, 65218, 65239, 65251, 65268, 65291, 65361, 65307, 65274, 65263, 65243, 65231, 65218, 65207, 65211, 65211, 65219, 65228, 65240, 65255, 65273, 65279, 65344, 65314, 65263, 65249, 65242, 65220, 65210, 65198, 65210, 65199, 65209, 65221, 65232, 65248, 65272, 65286, 65365, 65337, 65282, 65264, 65244, 65231, 65221, 65214, 65211, 65215, 65216, 65224, 65245, 65262, 65273, 65283, 65344, 65326, 65294, 65240, 65242, 65220, 65216, 65207, 65208, 65203, 65215, 65216, 65240, 65250, 65270, 65288, 65363, 65340, 65314, 65265, 65255, 65249, 65230, 65222, 65218, 65222, 65231, 65240, 65256, 65257, 65279, 65291, 65347, 65329, 65305, 65264, 65245, 65231, 65227, 65209, 65212, 65210, 65230, 65227, 65253, 65250, 65270, 65286, 65372, 65350, 65329, 65302, 65278, 65250, 65237, 65228, 65225, 65234, 65249, 65249, 65255, 65264, 65289, 65301, 65343, 65329, 65314, 65288, 65267, 65239, 65226, 65213, 65218, 65220, 65248, 65243, 65243, 65253, 65278, 65295, 65370, 65358, 65342, 65321, 65293, 65263, 65249, 65239, 65243, 65250, 65262, 65274, 65271, 65277, 65296, 65309, 65319, 65322, 65312, 65288, 65273, 65234, 65231, 65216, 65221, 65224, 65245, 65249, 65259, 65252, 65276, 65292, 19045, 6712, 32767, 6712, 32767, 6711, 32767, 6711, 65438, 52923, 5865, 55245, 65523, 4, 65532, 0, 6902, 1067, 653, 32767, 6902, 1066, 653, 32767, 3, 3, 3, 3, 3, 3, 3, 3, 1678, 32767, 6712, 32767, 6712, 32767, 6711, 32767, 65441, 62765, 53354, 55142, 3, 65529, 65532, 0, 261, 102, 10696, 63, 261, 102, 10696, 63, 3, 3, 3, 3, 3, 3, 3, 3, 6529, 1, 28246]
        page1 = [29271, 2573, 65414, 65371, 65347, 65343, 65326, 65320, 65331, 65377, 65380, 65384, 65369, 65352, 65357, 65365, 65371, 65400, 65375, 65342, 65324, 65318, 65301, 65295, 65318, 65349, 65351, 65358, 65321, 65317, 65327, 65344, 65347, 65369, 65382, 65356, 65337, 65326, 65312, 65301, 65297, 65337, 65353, 65345, 65321, 65304, 65330, 65344, 65355, 65373, 65349, 65336, 65312, 65300, 65281, 65277, 65269, 65315, 65306, 65302, 65275, 65280, 65303, 65320, 65332, 65341, 65374, 65347, 65324, 65314, 65295, 65281, 65268, 65272, 65278, 65277, 65275, 65283, 65296, 65321, 65339, 65348, 65337, 65322, 65299, 65292, 65263, 65258, 65242, 65240, 65237, 65243, 65245, 65263, 65268, 65291, 65302, 65309, 65356, 65329, 65314, 65299, 65278, 65267, 65247, 65251, 65250, 65250, 65252, 65263, 65281, 65298, 65310, 65335, 65321, 65306, 65287, 65276, 65251, 65245, 65221, 65218, 65215, 65228, 65232, 65243, 65252, 65272, 65282, 65302, 65351, 65313, 65308, 65287, 65266, 65253, 65239, 65236, 65233, 65240, 65243, 65254, 65272, 65286, 65301, 65318, 65314, 65295, 65272, 65262, 65241, 65225, 65212, 65209, 65205, 65215, 65216, 65229, 65239, 65264, 65274, 65293, 65351, 65314, 65300, 65283, 65262, 65241, 65236, 65228, 65232, 65230, 65232, 65243, 65256, 65276, 65291, 65310, 65317, 65288, 65274, 65258, 65229, 65220, 65203, 65203, 65198, 65203, 65207, 65225, 65232, 65249, 65266, 65282, 65352, 65312, 65294, 65274, 65253, 65239, 65224, 65227, 65217, 65218, 65230, 65237, 65254, 65273, 65286, 65307, 65326, 65283, 65259, 65249, 65228, 65220, 65195, 65199, 65194, 65196, 65203, 65222, 65230, 65248, 65258, 65279, 65361, 65336, 65280, 65276, 65256, 65244, 65227, 65222, 65224, 65222, 65223, 65238, 65247, 65265, 65282, 65307, 65337, 65305, 65250, 65249, 65224, 65218, 65201, 65197, 65195, 65203, 65205, 65215, 65225, 65247, 65263, 65270, 65367, 65352, 65302, 65268, 65262, 65243, 65233, 65224, 65225, 65225, 65231, 65238, 65254, 65268, 65286, 65302, 65339, 65324, 65273, 65248, 65227, 65219, 65206, 65204, 65196, 65203, 65198, 65216, 65232, 65252, 65261, 65274, 65365, 65355, 65323, 65275, 65262, 65255, 65243, 65232, 65232, 65233, 65242, 65245, 65263, 65276, 65281, 65305, 65342, 65327, 65297, 65259, 65237, 65236, 65213, 65209, 65202, 65214, 65222, 65232, 65236, 65247, 65266, 65280, 65368, 65354, 65332, 65312, 65280, 65265, 65243, 65239, 65233, 65239, 65263, 65266, 65263, 65274, 65289, 65315, 65347, 65329, 65305, 65292, 65261, 65234, 65218, 65216, 65210, 65226, 65232, 65242, 65238, 65255, 65273, 65293, 65359, 65362, 65338, 65329, 65300, 65272, 65255, 65244, 65248, 65254, 65267, 65279, 65278, 65283, 65300, 65317, 65325, 65329, 65309, 65294, 65259, 65236, 65219, 65217, 65218, 65229, 65234, 65250, 65250, 65256, 65270, 65289, 19047, 6712, 32767, 6712, 32767, 6711, 32767, 6711, 65437, 52923, 5863, 55245, 65523, 4, 65534, 0, 6894, 1067, 656, 32767, 6894, 1066, 656, 32767, 3, 3, 3, 3, 3, 3, 3, 3, 1678, 32767, 6712, 32767, 6712, 32767, 6711, 32767, 65441, 62767, 53354, 55141, 3, 65528, 65532, 65535, 261, 99, 10696, 67, 261, 99, 10696, 67, 3, 3, 3, 3, 3, 3, 3, 3, 6529]
        if nr == 0:
            self._pageData = page0
        if nr == 1:
            self._pageData = page1
        index = 384

        self._ADC = self._pageData[450]        
        if self._pageData[449] == 0:
            for i in range(384):
                location = (i * 2) + (m.floor(i / 16) % 2)
                self._frameData[location] = self._pageData[i]
        else:
            for i in range(384):
                location = (i * 2) + 1 - (m.floor(i / 16) % 2)
                self._frameData[location] = self._pageData[i]
        for i in range(768, 835):
            self._frameData[i] = self._pageData[index]
            index += 1

    def getVDD(self):
        vdd = self._frameData[810]
        if vdd > 32767:
            vdd -= 65536

        resRAM = (self._frameData[832] & 3072) / 1024
        resCor = pow(2, self._deviceParams['resolutionEE']) / m.pow(2, resRAM)
        vdd = ((resCor * vdd - self._deviceParams['vdd25']) / self._deviceParams['kVdd']) + 3.3
        return vdd

    def getTa(self):
        vdd = self.getVDD()
        ptat = self._frameData[800]
        if ptat > 32767:
            ptat -= 65536

        ptatArt = self._frameData[768]
        if ptatArt > 32767:
            ptatArt -= 65536

        ptatArt += (ptat * self._deviceParams['alphaPTAT'])
        ptatArt = (ptat / ptatArt) * 262144
        ta = ptatArt / (1 + self._deviceParams['kvPTAT'] * (vdd - 3.3)) - self._deviceParams['vPTAT25']
        ta = (ta / self._deviceParams['ktPTAT']) + 25
        return ta
    
    def getGain(self):
        gain = self._frameData[778]
        if gain > 32767:
            gain -= 65536
        
        gain = self._deviceParams['gainEE'] / gain

        return gain

    def getIRDataCP(self, gain, ta, vdd, mode): 
        ## Compensate the gain of the CP pixel
        irDataCP0 = self._frameData[776]
        if irDataCP0 > 32767:
            irDataCP0 -= 65536
        
        irDataCP1 = self._frameData[808]
        if irDataCP1 > 32767:
            irDataCP1 -= 65536
        
        irDataCP0 *= gain
        irDataCP1 *= gain

        ## Compensate the offset, Ta and VDD of the CP pixels
        irDataCP0 = irDataCP0 - self._deviceParams['cpOffset'][0] * (1 + self._deviceParams['cpKta'] * (ta - 25)) * (1 + self._deviceParams['cpKv'] * (vdd - 3.3))
        if mode == self._deviceParams['calibrationModeEE']:
            irDataCP1 = irDataCP1 - self._deviceParams['cpOffset'][1] * (1 + self._deviceParams['cpKta'] * (ta - 25)) * (1 + self._deviceParams['cpKv'] * (vdd - 3.3))
        else:
            irDataCP1 = irDataCP1 - (self._deviceParams['cpOffset'][1] + self._deviceParams['ilChessC'][0]) * (1 + self._deviceParams['cpKta'] * (ta - 25)) * (1 + self._deviceParams['cpKv'] * (vdd - 3.3))
        
        return [irDataCP0, irDataCP1]

    def getPixData(self):        
        # # Example 1
        #frame0 = ['0xFFB3','0xFFAC','0xFFB4','0xFFAA','0xFFB3','0xFFAC','0xFFB6','0xFFA9','0xFFB2','0xFFA8','0xFFB4','0xFFA6','0xFFB1','0xFFA5','0xFFB4','0xFFA2','0xFFB4','0xFFA5','0xFFB4','0xFFA4','0xFFB6','0xFFA7','0xFFB5','0xFFA4','0xFFBA','0xFFA6','0xFFB8','0xFFA5','0xFFB6','0xFFAA','0xFFBD','0xFFA4','0xFFA9','0xFFA8','0xFFA6','0xFFA8','0xFFA9','0xFFA6','0xFFA6','0xFFA5','0xFFAA','0xFFA2','0xFFA5','0xFFA2','0xFFA9','0xFF9F','0xFFA5','0xFFA1','0xFFAD','0xFFA0','0xFFA6','0xFFA2','0xFFAB','0xFFA3','0xFFA8','0xFFA4','0xFFB2','0xFFA2','0xFFAB','0xFFA3','0xFFB0','0xFFA4','0xFFAF','0xFFA3','0xFFB2','0xFFAC','0xFFB4','0xFFAB','0xFFB1','0xFFAC','0xFFB1','0xFFA8','0xFFB1','0xFFA9','0xFFB3','0xFFA5','0xFFB2','0xFFA5','0xFFB1','0xFFA3','0xFFB5','0xFFA5','0xFFB1','0xFFA3','0xFFB6','0xFFA7','0xFFB5','0xFFA2','0xFFB8','0xFFA7','0xFFB7','0xFFA3','0xFFB6','0xFFA8','0xFFB9','0xFFA2','0xFFA7','0xFFA7','0xFFA4','0xFFA7','0xFFA9','0xFFA5','0xFFA4','0xFFA6','0xFFA8','0xFFA3','0xFFA4','0xFFA2','0xFFAC','0xFF9F','0xFFA2','0xFFA3','0xFFAD','0xFFA0','0xFFA4','0xFFA2','0xFFAC','0xFFA2','0xFFA8','0xFFA1','0xFFB1','0xFFA3','0xFFA8','0xFFA3','0xFFAD','0xFFA1','0xFFAC','0xFFA1','0xFFB3','0xFFAD','0xFFB5','0xFFA9','0xFFB2','0xFFAB','0xFFB2','0xFFA8','0xFFB4','0xFFA9','0xFFB1','0xFFA4','0xFFB1','0xFFA6','0xFFB3','0xFFA2','0xFFB5','0xFFA7','0xFFB2','0xFFA3','0xFFB2','0xFFA5','0xFFB4','0xFFA2','0xFFB6','0xFFA5','0xFFB8','0xFFA5','0xFFB4','0xFFA7','0xFFB9','0xFFA0','0xFFAA','0xFFA5','0xFFA4','0xFFA6','0xFFAA','0xFFA4','0xFFA2','0xFFA4','0xFFA9','0xFFA1','0xFFA2','0xFFA3','0xFFAA','0xFFA1','0xFFA3','0xFFA0','0xFFAD','0xFF9F','0xFFA4','0xFFA3','0xFFAB','0xFFA0','0xFFA3','0xFFA1','0xFFAD','0xFF9E','0xFFA9','0xFFA1','0xFFAB','0xFFA0','0xFFAA','0xFF9D','0xFFB0','0xFFAD','0xFFB2','0xFFAA','0xFFB2','0xFFAB','0xFFB3','0xFFA9','0xFFB8','0xFFAA','0xFFB6','0xFFA4','0xFFB2','0xFFA6','0xFFB1','0xFFA4','0xFFB2','0xFFA4','0xFFB2','0xFFA4','0xFFB2','0xFFA7','0xFFB5','0xFFA4','0xFFB2','0xFFA5','0xFFB4','0xFFA2','0xFFB4','0xFFA6','0xFFB9','0xFFA2','0xFFA5','0xFFA4','0xFFA1','0xFFA4','0xFFA6','0xFFA0','0xFFA1','0xFFA3','0xFFA8','0xFFA7','0xFFA1','0xFFAA','0xFFA6','0xFFA1','0xFFA1','0xFFA1','0xFFA8','0xFF9D','0xFFA2','0xFF9F','0xFFA8','0xFF9F','0xFFA2','0xFF9F','0xFFAB','0xFF9E','0xFFA4','0xFFA0','0xFFAB','0xFF9F','0xFFA8','0xFF9B','0xFFAF','0xFFAE','0xFFB3','0xFFA9','0xFFAF','0xFFAB','0xFFB4','0xFFA8','0xFFBB','0xFFAA','0xFFC6','0xFFA6','0xFFC0','0xFFA8','0xFFB6','0xFFA2','0xFFB0','0xFFA5','0xFFB1','0xFFA2','0xFFB3','0xFFA6','0xFFB2','0xFFA2','0xFFB4','0xFFA2','0xFFB4','0xFFA2','0xFFB4','0xFFA6','0xFFB7','0xFFA1','0xFFA3','0xFFA2','0xFF9F','0xFFA1','0xFFA5','0xFFA2','0xFFA2','0xFFA4','0xFFAA','0xFFB2','0xFFA4','0xFFB4','0xFFA8','0xFFAD','0xFFA1','0xFFA6','0xFFA8','0xFF9D','0xFFA2','0xFF9D','0xFFAB','0xFF9D','0xFFA3','0xFF9F','0xFFAD','0xFF9C','0xFFA3','0xFF9F','0xFFAB','0xFF9D','0xFFA6','0xFF9C','0xFFB3','0xFFAD','0xFFB3','0xFFA9','0xFFB4','0xFFAC','0xFFB5','0xFFA9','0xFFC8','0xFFAE','0xFFC8','0xFFAB','0xFFC9','0xFFAE','0xFFC2','0xFFA6','0xFFBD','0xFFA9','0xFFB5','0xFFA8','0xFFB2','0xFFAC','0xFFB0','0xFFA4','0xFFB3','0xFFA4','0xFFB2','0xFFA1','0xFFB2','0xFFA4','0xFFB4','0xFF9C','0xFFA4','0xFFA1','0xFF9F','0xFFA2','0xFFA7','0xFFA1','0xFFA2','0xFFAA','0xFFAD','0xFFB7','0xFFA7','0xFFB8','0xFFAD','0xFFB5','0xFFA3','0xFFB1','0xFFAF','0xFFA8','0xFFAA','0xFFA0','0xFFB2','0xFF9B','0xFFA5','0xFF9D','0xFFAC','0xFF9A','0xFFA4','0xFF9D','0xFFAB','0xFF9C','0xFFA5','0xFF9A','0xFFAE','0xFFAD','0xFFAD','0xFFA8','0xFFB1','0xFFAD','0xFFBB','0xFFAE','0xFFCB','0xFFB2','0xFFCE','0xFFAE','0xFFCB','0xFFB0','0xFFC5','0xFFAB','0xFFC6','0xFFB2','0xFFBD','0xFFB0','0xFFB2','0xFFB1','0xFFB0','0xFFA8','0xFFB3','0xFFAA','0xFFB1','0xFFA4','0xFFB1','0xFFA5','0xFFB4','0xFF9D','0xFF9F','0xFF9E','0xFF98','0xFF9F','0xFFA3','0xFFA0','0xFFA2','0xFFB3','0xFFAC','0xFFBB','0xFFA7','0xFFBF','0xFFAE','0xFFB7','0xFFA5','0xFFB3','0xFFB4','0xFFB0','0xFFAE','0xFFA6','0xFFB6','0xFF9B','0xFFAB','0xFF99','0xFFB4','0xFF9A','0xFFA7','0xFF9D','0xFFAC','0xFF9D','0xFFA5','0xFF9A','0xFFAC','0xFFAD','0xFFB0','0xFFA8','0xFFB1','0xFFAD','0xFFC3','0xFFAF','0xFFCA','0xFFB3','0xFFCD','0xFFAD','0xFFCA','0xFFB0','0xFFC8','0xFFAD','0xFFC6','0xFFB8','0xFFB9','0xFFB1','0xFFB2','0xFFB5','0xFFAF','0xFFAD','0xFFB3','0xFFAF','0xFFB0','0xFFA9','0xFFB0','0xFFA6','0xFFB4','0xFF9D','0xFF9E','0xFF9C','0xFF9C','0xFF9F','0xFFA1','0xFFA4','0xFFA0','0xFFB3','0xFFAB','0xFFB5','0xFFA4','0xFFB9','0xFFAC','0xFFB3','0xFFA7','0xFFB2','0xFFB5','0xFFAF','0xFFB1','0xFF9D','0xFFB7','0xFF9B','0xFFAD','0xFF9A','0xFFB6','0xFF9A','0xFFA8','0xFF9C','0xFFAA','0xFF9B','0xFFA5','0xFF9A','0xFFAE','0xFFAC','0xFFB0','0xFFAB','0xFFB6','0xFFAE','0xFFC0','0xFFAD','0xFFC3','0xFFB0','0xFFC2','0xFFAB','0xFFC4','0xFFB0','0xFFC2','0xFFB0','0xFFC4','0xFFB8','0xFFB2','0xFFB3','0xFFAE','0xFFB4','0xFFAE','0xFFAF','0xFFB0','0xFFAF','0xFFAF','0xFFA5','0xFFB2','0xFFA4','0xFFB3','0xFF9D','0xFF9E','0xFF9A','0xFF9A','0xFF9F','0xFFA1','0xFFA4','0xFF9D','0xFFAF','0xFFA7','0xFFAC','0xFF9F','0xFFAD','0xFFAA','0xFFB0','0xFFA7','0xFFAF','0xFFB5','0xFFA6','0xFFAF','0xFF9A','0xFFB5','0xFF98','0xFFAA','0xFF9B','0xFFB3','0xFF99','0xFFA5','0xFF9A','0xFFAA','0xFF9F','0xFFA5','0xFF9A','0xFFA7','0xFFAC','0xFFAA','0xFFA8','0xFFAA','0xFFAD','0xFFB0','0xFFAB','0xFFB9','0xFFAD','0xFFBF','0xFFAB','0xFFBD','0xFFAF','0xFFC0','0xFFB0','0xFFBA','0xFFB4','0xFFAE','0xFFAF','0xFFAC','0xFFB0','0xFFAC','0xFFAC','0xFFB0','0xFFAE','0xFFB0','0xFFA6','0xFFBB','0xFFA5','0xFFBC','0xFFA0','0xFF96','0xFF96','0xFF92','0xFF99','0xFF99','0xFF98','0xFF97','0xFF9E','0xFFA0','0xFFA0','0xFF9E','0xFFA7','0xFFA5','0xFFA8','0xFFA3','0xFFA9','0xFFAE','0xFF9A','0xFFA5','0xFF97','0xFFAE','0xFF95','0xFFA6','0xFF99','0xFFAF','0xFF98','0xFFA2','0xFFA0','0xFFAB','0xFFA9','0xFFA3','0xFFA6','0xFFA4','0xFFAE','0xFFA7','0xFFA5','0xFFA7','0xFFA7','0xFFA9','0xFFA6','0xFFAC','0xFFA6','0xFFB0','0xFFA3','0xFFB7','0xFFAD','0xFFB7','0xFFA9','0xFFAF','0xFFAB','0xFFA8','0xFFA8','0xFFAC','0xFFAD','0xFFAB','0xFFAA','0xFFAF','0xFFAE','0xFFB6','0xFFA7','0xFFBC','0xFFAB','0xFFC4','0xFFA4','0xFF93','0xFF95','0xFF90','0xFF94','0xFF94','0xFF93','0xFF92','0xFF96','0xFF99','0xFF93','0xFF96','0xFF97','0xFFA0','0xFF9E','0xFF9B','0xFF9E','0xFFA4','0xFF93','0xFF9D','0xFF94','0xFFA9','0xFF96','0xFF9F','0xFF96','0xFFAB','0xFF97','0xFFA1','0xFFA5','0xFFA9','0xFFAA','0xFFA4','0xFFA6','0xFFA4','0xFFAC','0xFFA4','0xFFA6','0xFFA6','0xFFA7','0xFFA6','0xFFA1','0xFFA5','0xFFA6','0xFFA4','0xFFA3','0xFFA7','0xFFA4','0xFFA7','0xFF9F','0xFFAB','0xFFA3','0xFFA9','0xFFA3','0xFFAA','0xFFA7','0xFFAB','0xFFA6','0xFFAE','0xFFAA','0xFFB7','0xFFA6','0xFFBB','0xFFAA','0xFFBB','0xFFA3','0xFF87','0xFF8A','0xFF84','0xFF8C','0xFF8A','0xFF8B','0xFF86','0xFF8B','0xFF8B','0xFF89','0xFF85','0xFF8B','0xFF8F','0xFF89','0xFF8A','0xFF8B','0xFF91','0xFF8A','0xFF8C','0xFF8D','0xFF9A','0xFF8B','0xFF95','0xFF8E','0xFF9E','0xFF93','0xFF98','0xFF9D','0xFF9E','0xFF9D','0xFF9A','0xFF99','0x4DFA','0x1A56','0x7FFF','0x1A56','0x7FFF','0x1A55','0x7FFF','0x1A55','0xFFB9','0xCE07','0x1584','0xD653','0xFFF9','0x0009','0x0000','0xFFFD','0x1976','0x03FD','0x0297','0x7FFF','0x1976','0x03FD','0x0297','0x7FFF','0x0001','0x0001','0x0001','0x0001','0x0001','0x0001','0x0001','0x0001','0x0695','0x7FFF','0x1A56','0x7FFF','0x1A56','0x7FFF','0x1A55','0x7FFF','0xFFBD','0xF57A','0xCEF2','0xD8E0','0x0009','0xFFFD','0xFFFC','0x0000','0x00ED','0x0046','0x2AD6','0x0035','0x00EE','0x0046','0x2AD6','0x0035','0x0001','0x0001','0x0001','0x0001','0x0001','0x0001','0x0001','0x0001','0x1901','0x0000']
        # frame1 = ['0xFFB3','0xFFAD','0xFFB4','0xFFAA','0xFFB3','0xFFAD','0xFFB6','0xFFA8','0xFFB2','0xFFA9','0xFFB4','0xFFA4','0xFFB1','0xFFA6','0xFFB4','0xFFA1','0xFFB4','0xFFA8','0xFFB4','0xFFA1','0xFFB6','0xFFA8','0xFFB5','0xFFA2','0xFFBA','0xFFA7','0xFFB8','0xFFA3','0xFFB6','0xFFAA','0xFFBD','0xFFA3','0xFFAC','0xFFA8','0xFFA5','0xFFA8','0xFFAC','0xFFA6','0xFFA5','0xFFA5','0xFFAA','0xFFA2','0xFFA2','0xFFA2','0xFFAB','0xFF9F','0xFFA0','0xFFA1','0xFFAB','0xFFA0','0xFFA4','0xFFA2','0xFFAB','0xFFA3','0xFFA6','0xFFA4','0xFFB1','0xFFA2','0xFFA9','0xFFA3','0xFFB0','0xFFA4','0xFFAD','0xFFA3','0xFFB2','0xFFAF','0xFFB4','0xFFA8','0xFFB1','0xFFAE','0xFFB1','0xFFA5','0xFFB1','0xFFAA','0xFFB3','0xFFA3','0xFFB2','0xFFA7','0xFFB1','0xFFA3','0xFFB5','0xFFA6','0xFFB1','0xFFA0','0xFFB6','0xFFA7','0xFFB5','0xFFA0','0xFFB8','0xFFA7','0xFFB7','0xFFA2','0xFFB6','0xFFA8','0xFFB9','0xFF9F','0xFFAA','0xFFA7','0xFFA4','0xFFA7','0xFFA9','0xFFA5','0xFFA3','0xFFA6','0xFFA9','0xFFA3','0xFFA3','0xFFA2','0xFFAA','0xFF9F','0xFFA2','0xFFA3','0xFFAD','0xFFA0','0xFFA2','0xFFA2','0xFFAD','0xFFA2','0xFFA6','0xFFA1','0xFFB1','0xFFA3','0xFFA7','0xFFA3','0xFFAD','0xFFA1','0xFFA9','0xFFA1','0xFFB3','0xFFAF','0xFFB5','0xFFAA','0xFFB2','0xFFAD','0xFFB2','0xFFA6','0xFFB4','0xFFAB','0xFFB1','0xFFA4','0xFFB1','0xFFA8','0xFFB3','0xFFA0','0xFFB5','0xFFA6','0xFFB2','0xFFA3','0xFFB2','0xFFA8','0xFFB4','0xFFA1','0xFFB6','0xFFA6','0xFFB8','0xFFA2','0xFFB4','0xFFA7','0xFFB9','0xFF9C','0xFFAB','0xFFA5','0xFFA3','0xFFA6','0xFFAA','0xFFA4','0xFFA4','0xFFA4','0xFFB0','0xFFA1','0xFFA4','0xFFA3','0xFFA9','0xFFA1','0xFFA0','0xFFA0','0xFFAE','0xFF9F','0xFFA2','0xFFA3','0xFFAD','0xFFA0','0xFFA4','0xFFA1','0xFFAE','0xFF9E','0xFFA8','0xFFA1','0xFFAC','0xFFA0','0xFFA8','0xFF9D','0xFFB0','0xFFAE','0xFFB2','0xFFA8','0xFFB2','0xFFAC','0xFFB3','0xFFA9','0xFFB8','0xFFB8','0xFFB6','0xFFAB','0xFFB2','0xFFAA','0xFFB1','0xFFA1','0xFFB2','0xFFA5','0xFFB2','0xFFA0','0xFFB2','0xFFA5','0xFFB5','0xFFA1','0xFFB2','0xFFA6','0xFFB4','0xFFA3','0xFFB4','0xFFA5','0xFFB9','0xFF9B','0xFFA6','0xFFA4','0xFFA2','0xFFA4','0xFFA7','0xFFA0','0xFFA2','0xFFA3','0xFFBB','0xFFA7','0xFFAF','0xFFAA','0xFFAF','0xFFA1','0xFFA1','0xFFA1','0xFFA9','0xFF9D','0xFFA0','0xFF9F','0xFFA8','0xFF9F','0xFFA2','0xFF9F','0xFFAC','0xFF9E','0xFFA4','0xFFA0','0xFFAC','0xFF9F','0xFFA6','0xFF9B','0xFFAF','0xFFAF','0xFFB3','0xFFA9','0xFFAF','0xFFAF','0xFFB4','0xFFB0','0xFFBB','0xFFC0','0xFFC6','0xFFB7','0xFFC0','0xFFB7','0xFFB6','0xFFA7','0xFFB0','0xFFA6','0xFFB1','0xFFA0','0xFFB3','0xFFA4','0xFFB2','0xFFA0','0xFFB4','0xFFA4','0xFFB4','0xFFA0','0xFFB4','0xFFA5','0xFFB7','0xFF9A','0xFFA6','0xFFA2','0xFF9F','0xFFA1','0xFFA8','0xFFA2','0xFFAA','0xFFA4','0xFFBE','0xFFB2','0xFFB6','0xFFB4','0xFFBE','0xFFAD','0xFFAC','0xFFA6','0xFFAC','0xFF9D','0xFFA0','0xFF9D','0xFFA9','0xFF9D','0xFFA0','0xFF9F','0xFFAA','0xFF9C','0xFFA1','0xFF9F','0xFFAC','0xFF9D','0xFFA2','0xFF9C','0xFFB3','0xFFAF','0xFFB3','0xFFAA','0xFFB4','0xFFB1','0xFFB5','0xFFBB','0xFFC8','0xFFC4','0xFFC8','0xFFBC','0xFFC9','0xFFBF','0xFFC2','0xFFB5','0xFFBD','0xFFB0','0xFFB5','0xFFA0','0xFFB2','0xFFA6','0xFFB0','0xFF9E','0xFFB3','0xFFA3','0xFFB2','0xFF9E','0xFFB2','0xFFA4','0xFFB4','0xFF9B','0xFFA8','0xFFA1','0xFF9D','0xFFA2','0xFFAC','0xFFA1','0xFFB1','0xFFAA','0xFFC7','0xFFB7','0xFFB9','0xFFB8','0xFFC0','0xFFB5','0xFFB2','0xFFB1','0xFFBB','0xFFA8','0xFFA5','0xFFA0','0xFFA7','0xFF9B','0xFF9C','0xFF9D','0xFFA9','0xFF9A','0xFFA1','0xFF9D','0xFFA9','0xFF9C','0xFFA5','0xFF9A','0xFFAE','0xFFAD','0xFFAD','0xFFA7','0xFFB1','0xFFB8','0xFFBB','0xFFC0','0xFFCB','0xFFCA','0xFFCE','0xFFC1','0xFFCB','0xFFBF','0xFFC5','0xFFB6','0xFFC6','0xFFB6','0xFFBD','0xFFA0','0xFFB2','0xFFA4','0xFFB0','0xFF9E','0xFFB3','0xFFA1','0xFFB1','0xFF9F','0xFFB1','0xFFA4','0xFFB4','0xFF9C','0xFFA3','0xFF9E','0xFF9A','0xFF9F','0xFFAE','0xFFA0','0xFFB1','0xFFB3','0xFFC1','0xFFBB','0xFFB9','0xFFBF','0xFFBF','0xFFB7','0xFFB1','0xFFB3','0xFFB8','0xFFB0','0xFFA0','0xFFA6','0xFFA7','0xFF9B','0xFF9E','0xFF99','0xFFAB','0xFF9A','0xFFA0','0xFF9D','0xFFAA','0xFF9D','0xFFA2','0xFF9A','0xFFAC','0xFFAF','0xFFB0','0xFFA9','0xFFB1','0xFFBD','0xFFC3','0xFFBA','0xFFCA','0xFFC2','0xFFCD','0xFFBC','0xFFCA','0xFFBE','0xFFC8','0xFFB7','0xFFC6','0xFFB1','0xFFB9','0xFFA0','0xFFB2','0xFFA5','0xFFAF','0xFF9D','0xFFB3','0xFFA4','0xFFB0','0xFFA0','0xFFB0','0xFFA3','0xFFB4','0xFF9B','0xFF9E','0xFF9C','0xFF9C','0xFF9F','0xFFAE','0xFFA4','0xFFAE','0xFFB3','0xFFB8','0xFFB5','0xFFAF','0xFFB9','0xFFBA','0xFFB3','0xFFAF','0xFFB2','0xFFB4','0xFFAF','0xFF9D','0xFF9D','0xFFA5','0xFF9B','0xFF9D','0xFF9A','0xFFA9','0xFF9A','0xFFA1','0xFF9C','0xFFA8','0xFF9B','0xFFA3','0xFF9A','0xFFAE','0xFFAF','0xFFB0','0xFFA8','0xFFB6','0xFFB5','0xFFC0','0xFFB5','0xFFC3','0xFFBC','0xFFC2','0xFFB6','0xFFC4','0xFFBD','0xFFC2','0xFFB0','0xFFC4','0xFFA9','0xFFB2','0xFF9E','0xFFAE','0xFFA3','0xFFAE','0xFF9E','0xFFB0','0xFFA3','0xFFAF','0xFFA1','0xFFB2','0xFFA6','0xFFB3','0xFF9E','0xFF9E','0xFF9A','0xFF98','0xFF9F','0xFFA4','0xFFA4','0xFFA2','0xFFAF','0xFFB0','0xFFAC','0xFFAA','0xFFAD','0xFFB6','0xFFB0','0xFFAA','0xFFAF','0xFFAB','0xFFA6','0xFF99','0xFF9A','0xFFA3','0xFF98','0xFF99','0xFF9B','0xFFA7','0xFF99','0xFFA2','0xFF9A','0xFFAE','0xFF9F','0xFFA3','0xFF9A','0xFFA7','0xFFAC','0xFFAA','0xFFA5','0xFFAA','0xFFAA','0xFFB0','0xFFA8','0xFFB9','0xFFB1','0xFFBF','0xFFB2','0xFFBD','0xFFB8','0xFFC0','0xFFA7','0xFFBA','0xFFA4','0xFFAE','0xFF9D','0xFFAC','0xFFA3','0xFFAC','0xFF9D','0xFFB0','0xFFA4','0xFFB0','0xFFAA','0xFFBB','0xFFB3','0xFFBC','0xFFA3','0xFF99','0xFF96','0xFF8F','0xFF99','0xFF97','0xFF98','0xFF93','0xFF9E','0xFF9E','0xFFA0','0xFF9E','0xFFA7','0xFFAC','0xFFA8','0xFF9F','0xFFA9','0xFFA1','0xFF9A','0xFF94','0xFF97','0xFFA0','0xFF95','0xFF98','0xFF99','0xFFA6','0xFF98','0xFFA5','0xFFA0','0xFFB8','0xFFA9','0xFFAD','0xFFA6','0xFFA4','0xFFAC','0xFFA7','0xFFA3','0xFFA7','0xFFA7','0xFFA9','0xFFA3','0xFFAC','0xFFA6','0xFFB0','0xFFA4','0xFFB7','0xFFAD','0xFFB7','0xFFA1','0xFFAF','0xFF9F','0xFFA8','0xFF9C','0xFFAC','0xFFA3','0xFFAB','0xFF9E','0xFFAF','0xFFAA','0xFFB6','0xFFAE','0xFFBC','0xFFBA','0xFFC4','0xFFA9','0xFF95','0xFF95','0xFF8E','0xFF94','0xFF96','0xFF93','0xFF91','0xFF96','0xFF99','0xFF93','0xFF94','0xFF97','0xFF9E','0xFF9E','0xFF94','0xFF9E','0xFF9D','0xFF93','0xFF91','0xFF94','0xFF9F','0xFF96','0xFF95','0xFF96','0xFFA8','0xFF97','0xFFA6','0xFFA5','0xFFB6','0xFFAA','0xFFAB','0xFFA6','0xFFA4','0xFFAA','0xFFA4','0xFFA2','0xFFA6','0xFFA7','0xFFA6','0xFF9E','0xFFA5','0xFFA4','0xFFA4','0xFF9F','0xFFA7','0xFFA1','0xFFA7','0xFF9B','0xFFAB','0xFFA0','0xFFA9','0xFF9D','0xFFAA','0xFFA1','0xFFAB','0xFF9F','0xFFAE','0xFFAE','0xFFB7','0xFFAD','0xFFBB','0xFFB5','0xFFBB','0xFFA3','0xFF87','0xFF8A','0xFF80','0xFF8C','0xFF8B','0xFF8B','0xFF83','0xFF8B','0xFF8B','0xFF89','0xFF86','0xFF8B','0xFF8E','0xFF89','0xFF86','0xFF8B','0xFF93','0xFF8A','0xFF87','0xFF8D','0xFF95','0xFF8B','0xFF8D','0xFF8E','0xFFA6','0xFF93','0xFFA0','0xFF9D','0xFFA9','0xFF9D','0xFF9C','0xFF99','0x4DFA','0x1A58','0x7FFF','0x1A58','0x7FFF','0x1A57','0x7FFF','0x1A57','0xFFB9','0xCE35','0x1584','0xD64E','0xFFF9','0x000B','0x0000','0xFFFE','0x1976','0x03FD','0x0297','0x7FFF','0x1976','0x03FD','0x0297','0x7FFF','0x0001','0x0001','0x0001','0x0001','0x0001','0x0001','0x0001','0x0001','0x0696','0x7FFF','0x1A58','0x7FFF','0x1A58','0x7FFF','0x1A57','0x7FFF','0xFFBF','0xF57A','0xCF18','0xD8E0','0x000A','0xFFFD','0xFFFE','0x0000','0x00F1','0x0046','0x2AC3','0x0035','0x00F1','0x0046','0x2AC3','0x0035','0x0001','0x0001','0x0001','0x0001','0x0001','0x0001','0x0001','0x0001','0x1901','0x0001']

        # for i in range(0, len(frame1)):
        #     self._frameData[i] = int(frame1[i], 16)

        for i in range(2):
            # Example 2
            self.getFrameData(i)

            subPage = self._frameData[833]
            vdd = self.getVDD()
            ta = self.getTa()
            ## Reflected temperature based on the sensor ambient temperature
            tr = ta - TA_SHIFT
            taTr = m.pow((tr + 273.15), 4) - (m.pow((tr + 273.15), 4) - m.pow((ta + 273.15), 4)) / EMISSIVITY

            # print(subPage)
            # print(vdd)
            print(m.pow((ta + 273.15), 4))
            print(m.pow((tr + 273.15), 4))
            print(m.pow((tr + 273.15), 4) - m.pow((ta + 273.15), 4))
            print(taTr)

            ## Sensitivity correction coefficients for each temperature range
            alphaCorrR = []
            alphaCorrR.append(1 / (1 + self._deviceParams['KsTo'][0] * 40))
            alphaCorrR.append(1)
            alphaCorrR.append(1 + self._deviceParams['KsTo'][2] * self._deviceParams['ct'][2])
            alphaCorrR.append(alphaCorrR[2] * (1 + self._deviceParams['KsTo'][3] * (self._deviceParams['ct'][3] - self._deviceParams['ct'][2])))

            gain = self.getGain()
            mode = (self._frameData[832] & 4096) / 32
            irDataCP = self.getIRDataCP(gain, ta, vdd, mode)
            
            for p in range(768):
                ilPattern = m.floor(p / 32) - m.floor(p / 64) * 2
                chessPattern = ilPattern ^ (p - (m.floor(p / 2)) * 2)
                conversionPattern = (m.floor((p + 2) / 4) - m.floor((p + 3) / 4) + m.floor((p + 1) / 4) - m.floor(p / 4)) * (1 - 2 * ilPattern)
                if mode == 0:
                    pattern = ilPattern
                else:
                    pattern = chessPattern    
                if pattern == subPage:
                    ## Calculate the gain compensation on each pixel
                    irData = self._frameData[p]
                    if irData > 32767:
                        irData -= 65536
                    irData = irData * gain

                    ## Calculate the IR data compensation with offset, VDD and Ta
                    irData = irData - self._deviceParams['offset'][p] * (1 + self._deviceParams['kta'][p] * (ta - 25)) * (1 + self._deviceParams['kv'][p] * (vdd - 3.3))

                    #irData = irData - app.structVar.offset(pixelNumber)*(1 + app.structVar.kta(pixelNumber)*(Ta - 25))*(1 + app.structVar.kv(pixelNumber)*(vdd - 3.3));

                    if not (mode == self._deviceParams['calibrationModeEE']):
                        irData = irData + self._deviceParams['ilChessC'][2] * (2 * ilPattern - 1) - self._deviceParams['ilChessC'][1] * conversionPattern
                    ## IR data emmisivity data compensation 
                    irData /= EMISSIVITY 
                    irData = irData - self._deviceParams['tgc'] * irDataCP[subPage] 
                    ## Normalizing to sensitivity
                    alphaCompensated = (self._deviceParams['alpha'][p] - self._deviceParams['tgc'] * self._deviceParams['cpAlpha'][subPage]) * (1 + self._deviceParams['KsTa'] * (ta - 25))
                    
                    sx = m.pow(alphaCompensated, 3) * (irData + alphaCompensated * taTr)
                    sx = self._deviceParams['KsTo'][1] * m.sqrt(m.sqrt(sx))
                    to = m.sqrt(irData / (alphaCompensated * (1 - self._deviceParams['KsTo'][1] * 273.15) + sx) + taTr)
                    to = m.sqrt(to) - 273.15
                    ## Determine the range we are in
                    if to < self._deviceParams['ct'][1]:
                        r = 0
                    elif to < self._deviceParams['ct'][2]:
                        r = 1
                    elif to < self._deviceParams['ct'][3]:
                        r = 2
                    else:
                        r = 3

                    ## Extended To range calculation
                    to = m.sqrt(m.sqrt(irData / (alphaCompensated * alphaCorrR[r] * (1 + self._deviceParams['KsTo'][r] * (to - self._deviceParams['ct'][r]))) + taTr)) - 273.15
                    self._tempData[p] = to
        
        return self._tempData